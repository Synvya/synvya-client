# =========================================================
# Deploy Synvya Client ‚Üí S3 + CloudFront + Lambda Functions
# =========================================================
name: Deploy client.synvya.com

on:
  push:
    branches: [ main ]
  workflow_dispatch:        # allow manual "Run workflow" button

permissions:
  id-token: write      # <-- allows OIDC token
  contents: read       # <-- allows checkout

concurrency:                # never run two deploys in parallel
  group: deploy-client
  cancel-in-progress: true

env:
  NODE_VERSION: "18"
  BUILD_DIR: dist
  BUCKET_NAME: client-synvya-com               # ‚ù∂ S3 bucket
  DISTRIBUTION_ID: E3DPPDWMXK3MAD              # ‚ùÇ CloudFront ID
  AWS_REGION: us-east-1                        # ‚ù∏ Region for S3 + CLI
  LAMBDA_STACK_NAME: synvya-lambda-infrastructure
  LAMBDA_S3_BUCKET: synvya-subscriptions-prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # -----------------------------------------------------
    # Checkout & build
    # -----------------------------------------------------
    - name: Check out repo
      uses: actions/checkout@v4

    - name: Setup Node ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    - name: Install deps & build frontend
      run: |
        npm ci
        npm run build

    # -----------------------------------------------------
    # Auth to AWS via OIDC
    # -----------------------------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}   # ‚ùπ
        aws-region: ${{ env.AWS_REGION }}

    # -----------------------------------------------------
    # Deploy Lambda Functions (only if Lambda code changed)
    # -----------------------------------------------------
    - name: Check if Lambda code changed
      id: lambda-changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '^aws-lambda/|^scripts/|aws-lambda-infrastructure.yml'; then
          echo "lambda_changed=true" >> $GITHUB_OUTPUT
        else
          echo "lambda_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create scripts directory
      if: steps.lambda-changes.outputs.lambda_changed == 'true'
      run: mkdir -p scripts

    - name: Build and deploy Lambda functions
      if: steps.lambda-changes.outputs.lambda_changed == 'true'
      env:
        ZAPRITE_API_KEY: ${{ secrets.ZAPRITE_API_KEY }}
      run: |
        # Build Lambda functions
        echo "üî® Building Lambda functions..."
        mkdir -p build/lambda-functions
        
        # Function to build a single Lambda function
        build_function() {
            local function_name=$1
            echo "üì¶ Building $function_name..."
            
            # Create temporary directory
            local temp_dir="build/temp-$function_name"
            mkdir -p "$temp_dir"
            
            # Copy function code and shared library
            cp -r "aws-lambda/$function_name"/* "$temp_dir/"
            cp -r "aws-lambda/lib" "$temp_dir/"
            
            # Install dependencies
            cd "$temp_dir"
            npm install --production
            
            # Create zip file
            zip -r "../lambda-functions/$function_name.zip" . -x "*.git*" "*.DS_Store*"
            
            # Return to root
            cd ../../..
            
            # Clean up temp directory
            rm -rf "$temp_dir"
            
            echo "‚úÖ Built $function_name"
        }
        
        # Build all functions
        build_function "check-subscription"
        build_function "create-zaprite-order"
        build_function "payment-webhook"
        build_function "get-order"
        build_function "get-user-orders"
        build_function "check-contact"
        
        # Upload Lambda function packages to S3
        echo "‚¨ÜÔ∏è Uploading Lambda functions to S3..."
        aws s3 sync build/lambda-functions/ s3://$LAMBDA_S3_BUCKET/lambda-functions/ --delete
        
        # Deploy CloudFormation stack
        echo "‚òÅÔ∏è Deploying Lambda infrastructure..."
        aws cloudformation deploy \
            --template-file aws-lambda-infrastructure.yml \
            --stack-name $LAMBDA_STACK_NAME \
            --parameter-overrides \
                ZapriteApiKey="$ZAPRITE_API_KEY" \
                S3BucketName="$LAMBDA_S3_BUCKET" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

    # -----------------------------------------------------
    # Upload hashed assets (1 year cache) and index.html (60 s)
    # -----------------------------------------------------
    - name: Sync hashed assets to S3
      run: |
        aws s3 sync $BUILD_DIR/ s3://$BUCKET_NAME \
          --exclude "*.html" \
          --cache-control "public,max-age=31536000,immutable"

    - name: Upload index.html with short cache-control
      run: |
        aws s3 cp $BUILD_DIR/index.html s3://$BUCKET_NAME/index.html \
          --cache-control "public,max-age=60"

    # -----------------------------------------------------
    # Bust CloudFront cache for index.html only
    # -----------------------------------------------------
    - name: Invalidate index.html
      run: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/index.html"

    # -----------------------------------------------------
    # Output Lambda URLs for reference
    # -----------------------------------------------------
    - name: Output Lambda Function URLs
      if: steps.lambda-changes.outputs.lambda_changed == 'true'
      run: |
        echo "üîó Lambda Function URLs:"
        aws cloudformation describe-stacks \
          --stack-name $LAMBDA_STACK_NAME \
          --query 'Stacks[0].Outputs[?contains(OutputKey, `Url`)].{Function:OutputKey,URL:OutputValue}' \
          --output table