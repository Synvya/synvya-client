# =========================================================
# Deploy Synvya Client → S3 + CloudFront + Lambda Functions
# =========================================================
name: Deploy client.synvya.com

on:
  push:
    branches: [ main ]
  workflow_dispatch:        # allow manual "Run workflow" button

permissions:
  id-token: write      # <-- allows OIDC token
  contents: read       # <-- allows checkout

concurrency:                # never run two deploys in parallel
  group: deploy-client
  cancel-in-progress: true

env:
  NODE_VERSION: "18"
  BUILD_DIR: dist
  BUCKET_NAME: client-synvya-com               # ❶ S3 bucket
  DISTRIBUTION_ID: E3DPPDWMXK3MAD              # ❂ CloudFront ID
  AWS_REGION: us-east-1                        # ❸ Region for S3 + CLI
  LAMBDA_STACK_NAME: synvya-lambda-infrastructure
  LAMBDA_S3_BUCKET: synvya-subscriptions-prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # -----------------------------------------------------
    # Checkout & build
    # -----------------------------------------------------
    - name: Check out repo
      uses: actions/checkout@v4

    - name: Setup Node ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    - name: Install deps
      run: |
        npm ci

    # -----------------------------------------------------
    # Auth to AWS via OIDC
    # -----------------------------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}   # ❹
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate runtime-env.js
      env:
        STACK_NAME: ${{ env.LAMBDA_STACK_NAME }}
      run: |
        mkdir -p public
        echo "window.SYNVYA_CFG = {" > public/runtime-env.js
        aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query "Stacks[0].Outputs[?ends_with(OutputKey,'Url')].[OutputKey,OutputValue]" \
          --output text \
        | while read KEY VALUE; do
            JSKEY="$(tr '[:upper:]' '[:lower:]' <<< ${KEY:0:1})${KEY:1}"
            echo "  $JSKEY: \"$VALUE\"," >> public/runtime-env.js
          done
        echo "};" >> public/runtime-env.js

    # -----------------------------------------------------
    # Deploy Lambda Functions (only if Lambda code changed)
    # -----------------------------------------------------
    - name: Check if Lambda code changed
      id: lambda-changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '^aws-lambda/|^scripts/|aws-lambda-infrastructure.yml|cloudfront-security-headers.js'; then
          echo "lambda_changed=true" >> $GITHUB_OUTPUT
        else
          echo "lambda_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Make deployment scripts executable
      if: steps.lambda-changes.outputs.lambda_changed == 'true'
      run: chmod +x scripts/*.sh

    - name: Deploy Lambda functions using deployment script
      if: steps.lambda-changes.outputs.lambda_changed == 'true'
      env:
        ZAPRITE_API_KEY: ${{ secrets.ZAPRITE_API_KEY }}
      run: ./scripts/deploy-lambda-infrastructure.sh

    - name: Build frontend
      run: |
        npm run build

    # -----------------------------------------------------
    # Upload hashed assets (1 year cache) and index.html (60 s)
    # -----------------------------------------------------
    - name: Sync hashed assets to S3
      run: |
        aws s3 sync $BUILD_DIR/ s3://$BUCKET_NAME \
          --exclude "*.html" \
          --cache-control "public,max-age=31536000,immutable"

    - name: Upload index.html with short cache-control
      run: |
        aws s3 cp $BUILD_DIR/index.html s3://$BUCKET_NAME/index.html \
          --cache-control "public,max-age=60"

    # -----------------------------------------------------
    # Bust CloudFront cache for index.html only
    # -----------------------------------------------------
    - name: Invalidate index.html
      run: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/index.html"

    # Lambda URLs are output by the deployment script