AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Synvya – six Lambda functions + Function URLs
  Uses an existing encrypted S3 bucket as its JSON “database”.

# ---------------------------------------------------------------------------
# Parameters
# ---------------------------------------------------------------------------
Parameters:
  ZapriteApiKey:
    Type: String
    NoEcho: true
    Description: Zaprite API key passed to the Zaprite functions
  S3BucketName:
    Type: String
    Default: synvya-subscriptions-prod
    Description: Name of the pre-existing S3 bucket that stores the database

  LambdaExecutionRoleArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/synvya/lambda-execution-role-arn"

# ---------------------------------------------------------------------------
# Resources
# ---------------------------------------------------------------------------
Resources:

# ---------------------------------------------------------------------------
# Execution role for all functions
# ---------------------------------------------------------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"



# ---------------------------------------------------------------------------
# Lambda: check-subscription
# ---------------------------------------------------------------------------
  CheckSubscriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-check-subscription
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/check-subscription.zip
      Environment:
        Variables:
          SUBSCRIPTION_DB_BUCKET: !Ref S3BucketName
      Timeout: 30

  CheckSubscriptionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt CheckSubscriptionFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["GET", "POST"]
        MaxAge: 86400

  CheckSubscriptionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref CheckSubscriptionFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: create-zaprite-order
# ---------------------------------------------------------------------------
  CreateZapriteOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-create-zaprite-order
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/create-zaprite-order.zip
      Environment:
        Variables:
          SUBSCRIPTION_DB_BUCKET: !Ref S3BucketName
          ZAPRITE_API_KEY:       !Ref ZapriteApiKey
      Timeout: 60

  CreateZapriteOrderUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt CreateZapriteOrderFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["POST"]
        MaxAge: 86400

  CreateZapriteOrderUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref CreateZapriteOrderFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: payment-webhook
# ---------------------------------------------------------------------------
  PaymentWebhookFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-payment-webhook
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/payment-webhook.zip
      Environment:
        Variables:
          SUBSCRIPTION_DB_BUCKET: !Ref S3BucketName
      Timeout: 30

  PaymentWebhookUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt PaymentWebhookFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["POST"]
        MaxAge: 86400

  PaymentWebhookUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref PaymentWebhookFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: get-order
# ---------------------------------------------------------------------------
  GetOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-get-order
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/get-order.zip
      Environment:
        Variables:
          ZAPRITE_API_KEY: !Ref ZapriteApiKey
      Timeout: 30

  GetOrderUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt GetOrderFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["GET"]
        MaxAge: 86400

  GetOrderUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref GetOrderFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: get-user-orders
# ---------------------------------------------------------------------------
  GetUserOrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-get-user-orders
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/get-user-orders.zip
      Environment:
        Variables:
          SUBSCRIPTION_DB_BUCKET: !Ref S3BucketName
      Timeout: 30

  GetUserOrdersUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt GetUserOrdersFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["GET"]
        MaxAge: 86400

  GetUserOrdersUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref GetUserOrdersFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: check-contact
# ---------------------------------------------------------------------------
  CheckContactFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-check-contact
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !Ref LambdaExecutionRoleArn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key:   lambda-functions/check-contact.zip
      Environment:
        Variables:
          ZAPRITE_API_KEY: !Ref ZapriteApiKey
      Timeout: 30

  CheckContactUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt CheckContactFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type"]
        AllowMethods: ["POST"]
        MaxAge: 86400


  CheckContactUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:       !Ref CheckContactFunction
      Action:             lambda:InvokeFunctionUrl
      Principal:          "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# CloudFront Function: AddSecurityHeaders
# ---------------------------------------------------------------------------
  AddSecurityHeadersFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: AddSecurityHeaders
      AutoPublish: true
      FunctionConfig:
        Comment: "Add security headers to responses"
        Runtime: cloudfront-js-2.0
      FunctionCode: !Sub |
        {{resolve:file:cloudfront-security-headers.js}}

# CloudFront Function association is handled manually in deployment script
# because AWS::CloudFront::FunctionAssociation is not a valid resource type

# ---------------------------------------------------------------------------
# Outputs
# ---------------------------------------------------------------------------
Outputs:

  CheckSubscriptionUrl:
    Description: URL for check-subscription
    Value: !GetAtt CheckSubscriptionUrl.FunctionUrl

  CreateZapriteOrderUrl:
    Description: URL for create-zaprite-order
    Value: !GetAtt CreateZapriteOrderUrl.FunctionUrl

  PaymentWebhookUrl:
    Description: URL for payment-webhook
    Value: !GetAtt PaymentWebhookUrl.FunctionUrl

  GetOrderUrl:
    Description: URL for get-order
    Value: !GetAtt GetOrderUrl.FunctionUrl

  GetUserOrdersUrl:
    Description: URL for get-user-orders
    Value: !GetAtt GetUserOrdersUrl.FunctionUrl

  CheckContactUrl:
    Description: URL for check-contact
    Value: !GetAtt CheckContactUrl.FunctionUrl