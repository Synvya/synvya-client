AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Synvya â€“ Free service with terms acceptance tracking
  Records user signups and terms acceptance in S3

# ---------------------------------------------------------------------------
# Parameters
# ---------------------------------------------------------------------------
Parameters:
  S3BucketName:
    Type: String
    Default: synvya-user-records-prod-v2
    Description: Name of the S3 bucket to create for storing user signup records

# ---------------------------------------------------------------------------
# Resources
# ---------------------------------------------------------------------------
Resources:

# ---------------------------------------------------------------------------
# S3 Bucket for User Records
# ---------------------------------------------------------------------------
  UserRecordsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

# ---------------------------------------------------------------------------
# Execution role for all functions
# ---------------------------------------------------------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${UserRecordsBucket}/*"
              - Effect: Allow
                Action: 
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${UserRecordsBucket}"

# ---------------------------------------------------------------------------
# Lambda: record-terms-acceptance
# ---------------------------------------------------------------------------
  RecordTermsAcceptanceFunction:
    Type: AWS::Lambda::Function
    DependsOn: UserRecordsBucket
    Properties:
      FunctionName: synvya-record-terms-acceptance
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          export const handler = async (event) => {
              return {
                  statusCode: 200,
                  headers: { 'Access-Control-Allow-Origin': '*' },
                  body: JSON.stringify({ message: 'Function will be updated with proper code' })
              };
          };
      Environment:
        Variables:
          USER_RECORDS_BUCKET: !Ref UserRecordsBucket
      Timeout: 30

  RecordTermsAcceptanceUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt RecordTermsAcceptanceFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
        AllowMethods:
          - POST
        AllowOrigins:
          - https://client.synvya.com
          - https://localhost:3000
          - http://localhost:3000
          - http://localhost:8888
        MaxAge: 86400

  RecordTermsAcceptanceUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RecordTermsAcceptanceFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: check-user-exists
# ---------------------------------------------------------------------------
  CheckUserExistsFunction:
    Type: AWS::Lambda::Function
    DependsOn: UserRecordsBucket
    Properties:
      FunctionName: synvya-check-user-exists
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          export const handler = async (event) => {
              return {
                  statusCode: 200,
                  headers: { 'Access-Control-Allow-Origin': '*' },
                  body: JSON.stringify({ message: 'Function will be updated with proper code' })
              };
          };
      Environment:
        Variables:
          USER_RECORDS_BUCKET: !Ref UserRecordsBucket
      Timeout: 30

  CheckUserExistsUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt CheckUserExistsFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
        AllowMethods:
          - GET
        AllowOrigins:
          - https://client.synvya.com
          - https://localhost:3000
          - http://localhost:3000
          - http://localhost:8888
        MaxAge: 86400

  CheckUserExistsUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CheckUserExistsFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Lambda: health-check
# ---------------------------------------------------------------------------
  HealthCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: synvya-health-check
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          export const handler = async (event, context) => {
              const method = event.requestContext.http.method;
              
              if (method === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'GET, OPTIONS',
                          'Access-Control-Max-Age': '86400'
                      },
                      body: ''
                  };
              }
              
              if (method !== 'GET') {
                  return {
                      statusCode: 405,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({ error: 'Method not allowed' })
                  };
              }
              
              return {
                  statusCode: 200,
                  headers: {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({
                      status: 'healthy',
                      environment: process.env.NODE_ENV || 'production',
                      timestamp: new Date().toISOString(),
                      message: 'Synvya serverless functions are operational',
                      runtime: 'aws-lambda'
                  })
              };
          };
      Timeout: 30

  HealthCheckUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt HealthCheckFunction.Arn
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
        AllowMethods:
          - GET
        AllowOrigins:
          - https://client.synvya.com
          - https://localhost:3000
          - http://localhost:3000
          - http://localhost:8888
        MaxAge: 86400

  HealthCheckUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthCheckFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

# ---------------------------------------------------------------------------
# Outputs
# ---------------------------------------------------------------------------
Outputs:
  UserRecordsBucketName:
    Description: Name of the S3 bucket storing user records
    Value: !Ref UserRecordsBucket
    Export:
      Name: !Sub "${AWS::StackName}-UserRecordsBucket"

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaExecutionRoleArn"

  RecordTermsAcceptanceUrl:
    Description: URL for recording terms acceptance
    Value: !GetAtt RecordTermsAcceptanceUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-RecordTermsAcceptanceUrl"

  CheckUserExistsUrl:
    Description: URL for checking if user exists
    Value: !GetAtt CheckUserExistsUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-CheckUserExistsUrl"

  HealthCheckUrl:
    Description: URL for health check endpoint
    Value: !GetAtt HealthCheckUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-HealthCheckUrl"